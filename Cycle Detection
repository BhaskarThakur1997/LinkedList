/* A linked list is said to contain a cycle if any node is visited more than once while traversing the list. Given a pointer to the head of a linked list, determine if it contains a cycle. If it does, return 1. Otherwise, return 0.
*/


 static boolean hasCycle(SinglyLinkedListNode head) {
                SinglyLinkedListNode slow = head;
                SinglyLinkedListNode fast = head;
                while(fast!=null && fast.next!=null){
                    slow = slow.next;
                    fast = fast.next.next;
                    if(fast == slow){
                        return true;
                    }
                }
                return false;

    }
